name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: "目标版本号 (例如: 1.0.0, 1.0.0-beta.0, 1.0.0-rc.0)"
        required: true
        type: string
      dry_run:
        description: "预演模式"
        required: true
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    concurrency:
      group: npm-release-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证
        run: |
          echo "当前分支: ${{ github.ref_name }}"
          echo "目标版本: ${{ github.event.inputs.target_version }}"
          echo "预演模式: ${{ github.event.inputs.dry_run }}"

          # 验证版本号格式
          TARGET_VERSION="${{ github.event.inputs.target_version }}"
          if [[ ! "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ 版本号格式无效，请使用以下格式之一："
            echo "   - 正式版: 1.0.0"
            echo "   - Beta版: 1.0.0-beta.0"
            echo "   - RC版: 1.0.0-rc.0"
            exit 1
          fi

          # 检查分支权限（允许在feature分支进行测试发布）
          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            if [ "${{ github.ref_name }}" != "main" ]; then
              echo "❌ 正式版发布必须在主分支进行"
              exit 1
            fi
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: |
          npm install -g npm@latest
          pnpm install --frozen-lockfile

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 解析版本号
        id: parse-version
        run: |
          TARGET_VERSION="${{ github.event.inputs.target_version }}"

          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # 正式版: 1.0.0
            VERSION_TYPE="release"
            PRERELEASE_ID=""
            echo "检测到正式版版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
            # Beta 版: 1.0.0-beta.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="beta"
            echo "检测到Beta版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            # RC 版: 1.0.0-rc.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="rc"
            echo "检测到RC版本号: $TARGET_VERSION"
          else
            echo "❌ 版本号格式无法识别"
            exit 1
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease_id=$PRERELEASE_ID" >> $GITHUB_OUTPUT

      - name: 准备 Changesets
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          VERSION_TYPE="${{ steps.parse-version.outputs.version_type }}"

          echo "📋 准备 Changesets 发布："
          echo "   - 目标版本: $TARGET_VERSION"
          echo "   - 版本类型: $VERSION_TYPE"
          echo "   - 当前分支: ${{ github.ref_name }}"
          echo "   - 预演模式: ${{ github.event.inputs.dry_run }}"
          echo ""

          # 清理可能存在的旧版本信息
          rm -f .changeset/pre.json

          # 创建临时的 changeset 文件来指定版本号
          mkdir -p .changeset
          TIMESTAMP=$(date +%s)
          CHANGESET_FILE=".changeset/temp-release-$TIMESTAMP.md"
          echo "---" > $CHANGESET_FILE
          echo "\"bestmcp\": $VERSION_TYPE" >> $CHANGESET_FILE
          echo "\"@bestmcp/server\": $VERSION_TYPE" >> $CHANGESET_FILE
          echo "\"@bestmcp/client\": $VERSION_TYPE" >> $CHANGESET_FILE
          echo "---" >> $CHANGESET_FILE
          echo "" >> $CHANGESET_FILE
          echo "发布指定版本 $TARGET_VERSION" >> $CHANGESET_FILE

          echo "✅ Changeset 文件已创建"

      - name: 应用版本更新
        if: github.event.inputs.dry_run != 'true'
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          VERSION_TYPE="${{ steps.parse-version.outputs.version_type }}"

          echo "🚀 应用版本更新到 $TARGET_VERSION..."

          # 应用 changesets 版本更新
          pnpm changeset version

          # 手动设置版本号到指定值
          if [ "${{ steps.parse-version.outputs.version_type }}" = "release" ]; then
            # 正式版
            pnpm -r --filter "./packages/**" exec npm version $TARGET_VERSION --no-git-tag-version
            npm version $TARGET_VERSION --no-git-tag-version
          else
            # 预发布版
            PRERELEASE_VERSION="${TARGET_VERSION}-${{ steps.parse-version.outputs.prerelease_id }}"
            pnpm -r --filter "./packages/**" exec npm version $PRERELEASE_VERSION --no-git-tag-version
            npm version $PRERELEASE_VERSION --no-git-tag-version
          fi

          echo "✅ 版本号已更新"

      - name: 构建项目
        run: |
          echo "🏗️ 构建项目..."
          pnpm clean
          pnpm build:packages
          echo "✅ 项目构建完成"

      - name: 生成 CHANGELOG
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "📝 生成 CHANGELOG..."
          pnpm changeset generate
          echo "✅ CHANGELOG 已生成"

      - name: 发布到 NPM
        if: github.event.inputs.dry_run != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          echo "📦 发布到 NPM..."
          pnpm changeset publish
          echo "✅ NPM 发布完成"

      - name: 提交版本更新
        if: github.event.inputs.dry_run != 'true'
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"

          echo "📝 提交版本更新..."
          git add .
          git commit -m "chore: release v$TARGET_VERSION"
          echo "✅ 版本更新已提交"

      - name: 创建 Git Tag 和 GitHub Release
        if: github.event.inputs.dry_run != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"

          echo "🏷️ 创建 Git Tag 和 GitHub Release..."

          # 创建并推送 tag
          git tag v$TARGET_VERSION
          git push --follow-tags

          # 创建 GitHub Release
          RELEASE_TITLE="🚀 v$TARGET_VERSION"

          # 读取 CHANGELOG 内容
          CHANGELOG_CONTENT=""
          if [ -f "docs/content/CHANGELOG.md" ]; then
            # 提取最新版本的 changelog
            awk "/^## \\[$TARGET_VERSION\\]/{flag=1; next} /^## \\[/{flag=0} flag" docs/content/CHANGELOG.md > /tmp/changelog.md
            CHANGELOG_CONTENT=$(cat /tmp/changelog.md)
          fi

          # 如果没有 changelog，使用默认内容
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT=$(printf "## 更新内容\n\n版本 %s 发布完成。\n\n### 主要改动\n- 详细变更请查看 git commit 历史" "$TARGET_VERSION")
          fi

          # 创建 GitHub Release
          gh release create v$TARGET_VERSION \
            --title "$RELEASE_TITLE" \
            --notes "$CHANGELOG_CONTENT" \
            --latest

          echo "✅ Git Tag 和 GitHub Release 创建完成"

      - name: 清理临时文件
        if: always()
        run: |
          echo "🧹 清理临时文件..."
          rm -f .changeset/temp-release-*.md
          echo "✅ 清理完成"

      - name: 完成发布
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          echo ""
          echo "🎉 发布流程完成！"
          echo "📋 发布信息："
          echo "   - 版本: $TARGET_VERSION"
          echo "   - 类型: ${{ steps.parse-version.outputs.version_type }}"
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "   - 模式: 预演模式（实际上未发布）"
          else
            echo "   - 模式: 正式发布"
            echo "   - NPM: ✅ 已发布"
            echo "   - GitHub Release: ✅ 已创建"
            echo "   - Git Tag: ✅ 已创建"
          fi
