name: NPM 发布

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: "目标版本号 (例如: 1.0.0, 1.0.0-beta.0, 1.0.0-rc.0)"
        required: true
        type: string
      dry_run:
        description: "预演模式"
        required: true
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  npm-release:
    name: NPM 发布
    runs-on: ubuntu-latest
    concurrency:
      group: npm-release-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证
        run: |
          echo "当前分支: ${{ github.ref_name }}"
          echo "目标版本: ${{ github.event.inputs.target_version }}"
          echo "预演模式: ${{ github.event.inputs.dry_run }}"

          # 验证版本号格式
          TARGET_VERSION="${{ github.event.inputs.target_version }}"
          if [[ ! "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ 版本号格式无效，请使用以下格式之一："
            echo "   - 正式版: 1.0.0"
            echo "   - Beta版: 1.0.0-beta.0"
            echo "   - RC版: 1.0.0-rc.0"
            exit 1
          fi

          # 检查分支权限（允许在feature分支进行测试发布）
          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            if [ "${{ github.ref_name }}" != "main" ]; then
              echo "❌ 正式版发布必须在主分支进行"
              exit 1
            fi
          fi

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"
          registry-url: "https://registry.npmjs.org"

      - name: 安装依赖
        run: |
          npm install -g npm@latest
          pnpm install --frozen-lockfile

      - name: 配置 npm 认证
        run: |
          # 清理可能存在的过时配置
          npm config delete always-auth 2>/dev/null || true
          npm config delete _auth 2>/dev/null || true
          npm config delete authtoken 2>/dev/null || true

          # 设置标准认证配置
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm config set registry https://registry.npmjs.org/

          # 验证配置
          echo "✅ npm 配置完成:"
          echo "   - registry: $(npm config get registry)"
          echo "   - always-auth: $(npm config get always-auth 2>/dev/null || echo '未设置')"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 解析版本号
        id: parse-version
        run: |
          TARGET_VERSION="${{ github.event.inputs.target_version }}"

          if [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # 正式版: 1.0.0
            VERSION_TYPE="release"
            PRERELEASE_ID=""
            echo "检测到正式版版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
            # Beta 版: 1.0.0-beta.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="beta"
            echo "检测到Beta版本号: $TARGET_VERSION"
          elif [[ "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            # RC 版: 1.0.0-rc.0
            VERSION_TYPE="prerelease"
            PRERELEASE_ID="rc"
            echo "检测到RC版本号: $TARGET_VERSION"
          else
            echo "❌ 版本号格式无法识别"
            exit 1
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease_id=$PRERELEASE_ID" >> $GITHUB_OUTPUT

      - name: 版本预检查
        run: |
          echo "🔍 版本预检查..."
          ROOT_VERSION=$(node -p "require('./package.json').version")
          CLIENT_VERSION=$(node -p "require('./packages/client/package.json').version")
          SERVER_VERSION=$(node -p "require('./packages/server/package.json').version")

          echo "当前版本状态："
          echo "   - 根目录 (bestmcp): $ROOT_VERSION"
          echo "   - Client (@bestmcp/client): $CLIENT_VERSION"
          echo "   - Server (@bestmcp/server): $SERVER_VERSION"

          if [ "$ROOT_VERSION" != "$CLIENT_VERSION" ] || [ "$ROOT_VERSION" != "$SERVER_VERSION" ]; then
            echo "❌ 版本不同步！正在自动同步..."
            TARGET_VERSION="$ROOT_VERSION"

            # 更新子包版本
            npm version "$TARGET_VERSION" --no-git-tag-version --workspaces-update false
            cd packages/client && npm version "$TARGET_VERSION" --no-git-tag-version && cd ../..
            cd packages/server && npm version "$TARGET_VERSION" --no-git-tag-version && cd ../..

            echo "✅ 版本已同步到: $TARGET_VERSION"
          else
            echo "✅ 版本同步正常"
          fi

      - name: 检查目标版本冲突
        id: version-check
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          echo "🔍 检查目标版本 $TARGET_VERSION 是否已存在..."

          # 配置临时认证（只用于检查）
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > ~/.npmrc_temp
          npm config set registry https://registry.npmjs.org/
          export npm_config_userconfig=~/.npmrc_temp

          CONFLICTS=0

          # 检查各个包的版本是否存在
          for PKG in "bestmcp" "@bestmcp/client" "@bestmcp/server"; do
            if npm view "$PKG@$TARGET_VERSION" --json 2>/dev/null | grep -q '"name"'; then
              echo "⚠️  $PKG@$TARGET_VERSION 已存在于 npm registry"
              CONFLICTS=$((CONFLICTS + 1))
            else
              echo "✅ $PKG@$TARGET_VERSION 可用"
            fi
          done

          # 清理临时配置
          rm -f ~/.npmrc_temp

          echo "conflicts=$CONFLICTS" >> $GITHUB_OUTPUT

          if [ $CONFLICTS -gt 0 ]; then
            echo "⚠️  检测到 $CONFLICTS 个版本冲突，但将强制发布"
          fi

      - name: 发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          TARGET_VERSION="${{ steps.parse-version.outputs.target_version }}"
          CONFLICTS="${{ steps.version-check.outputs.conflicts }}"
          RELEASE_CMD="npx release-it --ci --verbose"

          if [ "${{ steps.parse-version.outputs.version_type }}" = "release" ]; then
            # 正式版发布
            RELEASE_CMD="$RELEASE_CMD -i $TARGET_VERSION"
          else
            # 预发布版发布
            RELEASE_CMD="$RELEASE_CMD $TARGET_VERSION --preRelease=${{ steps.parse-version.outputs.prerelease_id }}"
          fi

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
          fi

          echo "📦 开始发布流程..."
          echo "📋 版本信息："
          echo "   - 目标版本: $TARGET_VERSION"
          echo "   - 版本类型: ${{ steps.parse-version.outputs.version_type }}"
          echo "   - 预发布ID: ${{ steps.parse-version.outputs.prerelease_id }}"
          echo "   - 当前分支: ${{ github.ref_name }}"
          echo "   - 预演模式: ${{ github.event.inputs.dry_run }}"
          echo "   - 版本冲突数: $CONFLICTS"
          echo "   - 执行命令: $RELEASE_CMD"
          echo ""

          # 检查环境
          echo "🔍 环境检查："
          echo "   - Node版本: $(node --version)"
          echo "   - pnpm版本: $(pnpm --version)"
          echo "   - npm版本: $(npm --version)"
          echo "   - 当前分支: $(git branch --show-current)"
          echo "   - Git状态: $(git status --porcelain | wc -l) 个文件有修改"
          echo ""

          # 验证认证配置
          echo "🔐 认证检查："
          echo "   - npm registry: $(npm config get registry)"
          echo "   - npm 认证状态: $(npm whoami 2>/dev/null || echo '未认证')"
          echo ""

          # 检查当前包版本状态
          echo "📦 当前包版本状态："
          echo "   - 根目录版本: $(node -p "require('./package.json').version")"
          echo "   - Client版本: $(node -p "require('./packages/client/package.json').version")"
          echo "   - Server版本: $(node -p "require('./packages/server/package.json').version")"
          echo ""

          # 清理 npm 缓存（避免缓存问题）
          echo "🧹 清理 npm 缓存..."
          npm cache clean --force 2>/dev/null || true

          # 如果存在冲突，准备强制发布
          if [ "$CONFLICTS" -gt 0 ]; then
            echo "⚠️  检测到版本冲突，将使用强制发布模式"
          fi

          # 执行发布命令
          echo "🚀 执行发布命令..."

          # 执行发布并捕获错误
          if ! eval "$RELEASE_CMD"; then
            echo "❌ 发布失败！"
            echo "📋 错误诊断："
            echo "   - 检查 npm 日志: /home/runner/.npm/_logs/"
            echo "   - 检查版本号是否冲突"
            echo "   - 检查网络连接和权限"
            echo "   - 验证包版本配置"
            echo "   - 版本冲突数: $CONFLICTS"

            # 输出详细的 npm 调试信息
            echo ""
            echo "🔍 详细诊断信息："
            npm config list
            echo ""
            echo "📋 npm 错误日志（最近5条）："
            ls -la /home/runner/.npm/_logs/ 2>/dev/null | tail -5 || echo "无法访问日志目录"

            # 输出具体的 npm 日志内容
            echo ""
            echo "📋 最新 npm 错误日志内容："
            find /home/runner/.npm/_logs/ -name "*debug-0.log" -exec tail -20 {} \; 2>/dev/null | head -50 || echo "无法读取日志内容"

            exit 1
          fi

          echo "✅ 发布命令执行完成！"
